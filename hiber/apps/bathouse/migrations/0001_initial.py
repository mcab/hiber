# Generated by Django 2.1.7 on 2019-05-09 00:01

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import hiber.apps.bathouse.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailimages', '0001_squashed_0021'),
    ]

    operations = [
        migrations.CreateModel(
            name='Bat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(help_text='Name used in everyday life', max_length=255)),
                ('scientific_name', models.CharField(help_text='Formal system used for naming species', max_length=255)),
                ('rarity', models.CharField(choices=[('CO', 'Common'), ('SC', 'Seasonally Common'), ('RA', 'Rare')], default='CO', help_text='How often the species is seen', max_length=2)),
                ('habits', hiber.apps.bathouse.models.ChoiceArrayField(base_field=models.CharField(choices=[('HI', 'Hibernates'), ('MI', 'Migrates'), ('CR', 'Cave roosts'), ('TR', 'Tree roosts')], max_length=2), blank=True, help_text='What the species tends to do in order to survive', size=None)),
                ('size', django.contrib.postgres.fields.ranges.FloatRangeField(help_text='Typical size in inches')),
                ('pups', django.contrib.postgres.fields.ranges.IntegerRangeField(help_text='Typical offspring per year')),
                ('risk', hiber.apps.bathouse.models.ChoiceArrayField(base_field=models.CharField(choices=[('NT', 'Not threatened'), ('EN', 'Endangered'), ('TH', 'Threatened'), ('SC', 'Special concern')], max_length=2), blank=True, help_text='Conservation status for the species', size=None)),
                ('risk_scope', hiber.apps.bathouse.models.ChoiceArrayField(base_field=models.CharField(choices=[('ST', 'State'), ('FE', 'Federally')], max_length=2, null=True), blank=True, help_text='Whether or not this applies at the federal or state level', null=True, size=None)),
                ('bat_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtailimages.Image')),
            ],
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='Point that indicates where the bat house is located', srid=4326, verbose_name='geographical location')),
                ('town_name', models.CharField(blank=True, help_text='Town where bat house is located', max_length=255, verbose_name='town location')),
                ('property_type', models.CharField(choices=[('ST', 'State'), ('TO', 'Town'), ('SC', 'School'), ('LT', 'Land Trust'), ('PR', 'Private'), ('OT', 'Other')], default='OT', help_text='Property type where bat house is located', max_length=2)),
                ('other_property_type', models.CharField(blank=True, help_text='Property type if Other was selected', max_length=255)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date when House was created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Date when House was updated')),
                ('watcher', models.ForeignKey(help_text='User that provides survey data for the bat house', on_delete=django.db.models.deletion.PROTECT, related_name='houses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HouseEnvironmentFeatures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habitat_degradation', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('DU', 'Dumping'), ('ER', 'Erosion'), ('TR', 'Trash'), ('NO', 'None'), ('OT', 'Other')], max_length=2), help_text='Habitat degradation present around the bat house', size=None)),
                ('other_habitat_degradation', models.CharField(blank=True, help_text='Habitat degradation if Other was selected', max_length=255)),
                ('habitat_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('DE', 'Development'), ('FE', 'Forest Edge'), ('FG', 'Forest Gap'), ('FI', 'Field'), ('SR', 'Stream/River'), ('WP', 'Wetland/Pond'), ('OT', 'Other')], help_text='Type of environment around the bat house', max_length=2), size=None)),
                ('other_habitat_type', models.CharField(blank=True, help_text='Habitat type if Other was selected', max_length=255)),
                ('man_made_structure', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('BU', 'Building'), ('BR', 'Bridge'), ('DA', 'Dam'), ('DR', 'Dirt Road'), ('FE', 'Fence'), ('PR', 'Paved Roads'), ('TR', 'Trail'), ('NO', 'None'), ('OT', 'Other')], max_length=2), help_text='Man-made structures present around the bat house', size=None)),
                ('other_man_made_structure', models.CharField(blank=True, help_text='Man-made structures present if Other was selected', max_length=255)),
                ('nearby_geography', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('VB', 'Valley or Bottomland Hillside'), ('RI', 'Ridgetop'), ('PL', 'Plane (Flat Area)')], max_length=2), help_text='Nearby geography of the area around the bat house', size=None)),
                ('slope', models.CharField(choices=[('F', 'Flat'), ('G', 'Gentle'), ('U', 'Undulating'), ('S', 'Steep')], help_text='Type of slope the bat house is on', max_length=1)),
                ('tree_type', models.IntegerField(help_text='Types of trees surrounding the bat house', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('day_noise', models.CharField(choices=[('L', 'Loud'), ('M', 'Medium'), ('Q', 'Quiet')], help_text='Noise around the bat house throughout the day', max_length=1)),
                ('night_noise', models.CharField(choices=[('L', 'Loud'), ('M', 'Medium'), ('Q', 'Quiet')], help_text='Noise around the bat house throughout the night', max_length=1)),
                ('noise_disturbance', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('BI', 'Businesses/Industry'), ('CA', 'Cars'), ('PR', 'People/Residential'), ('NO', 'None'), ('OT', 'Other')], max_length=2), help_text='Noise disturbances around the bat house', size=None)),
                ('other_noise_disturbance', models.CharField(blank=True, help_text='Noise disturbances if Other was selected', max_length=255)),
                ('night_light_pollution_amount', models.CharField(choices=[('A', 'A lot'), ('M', 'Medium'), ('L', 'Low'), ('N', 'None')], help_text='Light pollution amount at night around the bat house', max_length=1)),
                ('night_light_pollution_consistency', models.CharField(choices=[('T', 'Throughout'), ('I', 'Inconsistent')], help_text='Light pollution consistency at night around the bat house', max_length=1)),
                ('nearest_water_resources', models.CharField(choices=[('CW', 'Coastal Wetland'), ('IW', 'Inland Wetland'), ('LA', 'Lake'), ('PO', 'Pond'), ('RI', 'River'), ('ST', 'Stream'), ('VP', 'Vernal Pool'), ('NO', 'None'), ('OT', 'Other')], help_text='Nearest water resource to the bat house', max_length=2)),
                ('other_nearest_water_resource', models.CharField(blank=True, help_text='Water resource if Other was selected', max_length=255)),
                ('water_resource_distance', models.PositiveIntegerField(help_text='Distance to nearest water resource', validators=[django.core.validators.MinValueValidator(1)])),
                ('water_resource_units', models.CharField(choices=[('FT', 'Feet'), ('KM', 'Kilometers'), ('ME', 'Meters'), ('MI', 'Miles')], help_text='Units of distance to nearest water resource', max_length=2)),
                ('morning_sunlight', models.PositiveIntegerField(help_text='Amount of hours of morning sunlight the bat house receives', validators=[django.core.validators.MinValueValidator(1)])),
                ('afternoon_sunlight', models.PositiveIntegerField(help_text='Amount of hours of afternoon sunlight the bat house         receives', validators=[django.core.validators.MinValueValidator(1)])),
                ('surveyed', models.DateTimeField()),
                ('other_features', models.TextField(help_text='Other environmental features not covered')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='environment_features', to='bathouse.House')),
            ],
        ),
        migrations.CreateModel(
            name='HousePhysicalFeatures',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('house_size', models.CharField(choices=[('S', 'Small'), ('M', 'Medium'), ('L', 'Large')], help_text='Approximate size of the bat house', max_length=1)),
                ('color', models.CharField(choices=[('BL', 'Black'), ('DB', 'Dark brown'), ('MB', 'Medium brown'), ('LB', 'Light brown'), ('TB', 'Tan/Beige'), ('NW', 'Natural wood'), ('WH', 'White'), ('OT', 'Other')], help_text='Color of bat house', max_length=2)),
                ('other_color', models.CharField(blank=True, help_text='Color of bat house if Other is specified', max_length=255)),
                ('chambers', models.PositiveIntegerField(help_text='Number of chambers in bat house', validators=[django.core.validators.MinValueValidator(1)])),
                ('direction', models.CharField(choices=[('NO', 'North'), ('NE', 'Northeast'), ('EA', 'East'), ('SE', 'Southeast'), ('SO', 'South'), ('SW', 'Southwest'), ('WE', 'West'), ('NW', 'Northwest')], help_text='Direction which bat house is facing', max_length=2)),
                ('mounted_on', models.CharField(choices=[('BD', 'Building'), ('PI', 'On a pole by itself'), ('PB', 'On a pole with another bat house, back to back'), ('TR', 'Tree'), ('OT', 'Other')], help_text='Item which bat house is mounted to', max_length=2)),
                ('other_mounted_on', models.CharField(blank=True, help_text='Mount type if Other is specified', max_length=255)),
                ('ground_height', models.PositiveIntegerField(help_text='Height above the ground surface (in feet)', validators=[django.core.validators.MinValueValidator(1)])),
                ('installed', models.DateField(help_text='Date when the bat house was installed')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physical_features', to='bathouse.House')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checked', models.DateTimeField(help_text='Date and time when the bat house was checked')),
                ('present', models.BooleanField(help_text='True if bats were there, False otherwise', verbose_name='bat presence')),
                ('occupants', models.IntegerField(blank=True, help_text='Amount of bats present in the bat house')),
                ('acoustic_monitor', models.CharField(choices=[('Y', 'Yes'), ('N', 'No'), ('U', 'Unsure')], help_text='Has a bat biologist came to setup acoustic monitoring around             the bat house?', max_length=1)),
                ('notes', models.TextField(blank=True, help_text='Other notes about observations')),
                ('house', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='bathouse.House')),
            ],
        ),
    ]
